Introduction:
Intal is a c library for arithmetic operations of unsigned integers of 1000 digits, where the numbers are represented in decimal system. It can perform some of the basic operations neccessary like addition, difference, multiplication etc. These operations allow the user to not be limited by the limit of integer size of the compiler(which depends on system word size). 
Intal can have various useful applications in many fields, especially where large computations are necessary. For example, in the field of cryptography, where the large integer sizes are necessary to ensure security, while the efficient algorithms are useful in reducing any latency that could potential cause security concerns.

Approach:
intal_compare : Parameters : const char*, const char*
return type : int 
Description :
By left striping the zeros inthe arguements we remove any issues that can arise due to 0's(a potential bug). Next, comparing the lengths of the lstriped arguements, we can immediately see the comparison between the inputs. If the length are equal, then start comapring from the most significant digit to the least. If there are any digits that are unequal, then we return the corresponding valuue (-1 or 1,as suitable).If all digits are equal then we can declare the inputs to be equal and hence return 0.

intal_add : Parameters : const char*, const char*
return type : char*
Description :
While adding we move from the least significant digit to the most significant digit of the both the inputs. Carry is set to 0 initially. We add the digits of the inputs iteratively as well as adding carry, if the sum of the digits are greater than 10, then we subtract 10 from the sum and make carry 1, else carry is set to 0. Set the respective position of the result to the sum value. If one of the inputs is exhausted, then we add the other input digit wise with the carry and store it to the result, while continuing to keep a carry. Left strip and return the result.

intal_diff : Parameters : const char*, const char*
return type : char*
Description :
The operations done are similar to intal_add, except instead of adding, we subtract the digits and the carry. If the difference is less than 0, then add 10 and set carry to 1, else set carry 0.The resukt is stored into result in the respective index.The result is returned.

intal_multiply : Parameters : const char*, const char*
return type : char*
Description : 
The implementation follows Karatsuba Algorithm. Let the inputs be A and B, each of n digits(if they are of unequal digits,then pad with 0's to the left). Divide each number into two parts of n/2 digits. A = A1.A2, B = B1.B2. Then A*B = A1*B1*10^n + ((A1 + A2)(B1 + B2) - A1*B1 - A2*B2)*10^n/2 + A2*B2. This way we do only three multiplications, rather than doing 4,as in other divide and conquer methods. While the overhead of Karatsuba is large, it is much better suited for large integers(more than 20 digits), which is the primary goal of this library.

intal_mod : Parameters : const char*, const char*
return type : char*
Description :
To find the mod of A%B, we first check if A < B. If it is less than, then we simply return A. When less than, we will multiply B with 10 until they both have equal number of digits. Once they have equal number of digits, subtract B from A. We continue doing this until they are of equal lengths. Once they are of equal lengths, we will continually subtract B from the leftover number until the difference is less than B. We then retrurn the remianing value.

intal_gcd : Parameters : const char*, const char*
return type : char*
Description :
Euclid's algorithm is used here. Until the second parameters is zero we recursively call the intal_gcd function but with parameters being second parameter as first and first input mod second input. 

intal_pow : Parameters : const char*, unsigned int n
return type : char*
Description :
The implementation follows divide and conquer strategy. We recursively call intal_pow with second parameter being halved as to the parent call. Then check if the second parameter is odd or even, accordingly we either multiply the result of the recursion with itself, and multiply even with the input as well.

intal_fibonacci : Parameters : unsigned int
return type : char*
Description : 
The function iteratively calcuates fibonacci numbers and stores them. As only the last two computed fibonacci numbers are stored, hence reducing the space needed.

intal_factorial : Parameters : unsigned int
return type : char*
Description :
The function iteratively multiplies from 1 to the input and stores it in the result. The multiplication is done using intal_multiply.

intal_bincoeff : Parameters : unsigned int, unsigned int
return type : char*
Description : 
We know that nC0 and nCn is 1. The rest of the binomial coefficients can be calculated by the use of Pascal's identity.In the function, using Pascal's identity, it iteratively computes the binomail coefficients until we obtain the value we need. A subtle fact is that we dont need to store all the coefficients in memory for using Pascal's identity, rather only about as many values as the second parameter. This drastically reduces the memory requirements of the function.

intal_max : Parameters : char**, int
return type : int
Description : 
Iteratively traverse the array, comparing every element with the max found so far, if current element greater, make that the new max. Once the traversal is done return the position of max.

intal_min : Parameters : char**, int
return type : int
Description : 
Iteratively traverse the array, comparing every element with the min found so far, if current element greater, make that the new min. Once the traversal is done return the position of min.

intal_search : Parameters : char**, int, char*
return type : int
Description : 
Iteratively traverse the array, comparing every element with the key, if equla return the current position, else continue. If at end of traversal, key not found, return -1.

intal_binsearch : Parameters : char**, int, char*
return type : int
Description : 
The function follows the principle of divide and conquer strategy. Iteratively the array is divided into two halves, and depending on how the middle element compares with the key, the function chooses which part of the array to consider. If the key is greater than the middle element, then we consider the array from beginning to mid, else we choose the array from mid to end.

intal_sort : Parameters : char**, int
return type : void
Description : 
Sorting is done vased on mergesort principle. The input array is divided into 2 arrays, each passed recursively to mergesort. Then we merge the two partially sorted arrays. By doing this recursively the arrays are sorted. The merge function works by iteratively checking the two arrays passed to it element wise. Whichever element is smaller is put into the result array, in the current index. Update the inde by incrementing by 1.

coin_row_problem : Parameters : char**,int
return type : char*
Description :
The problem is solved using dynamic programming.Two variables are used for memoization, prev initially holds 0 and curr holds the first element. By iterating through te array of coins, add prev with the current element in the array. Check which among the sum and curr is max, set curr to that value, while making prev the current curr value. When the traversal of the array is done, whatever the value of curr is will be the solution to the coin row prolem for the given coins.

Future Work :
Functionalities that can be added : 1.Negative numbers as well. This could help extend the domain of calculations making the library even more useful.
2.Floating point numbers with high degree of precision. While this would require considerable changes to the working of the library, this would allow for useful applications in many different fields where precision more than that is available by default in the language is neccessary.
3. If Flaoting point numbers can be added then we can as well try and extend to imaginary numbers. However this seems to be have a niche application.

If there were no restricitions, then to build a library of arbitrary length integers I would try and implement similar functionalities, but one drawback/limitaation would be the possibility of overflowing the memory limit while doing these calculations as arbitrary length integers would be, as suggested, arbitrary length. So the functions and the lirary will be limited by the system capacity as to what arbitrary would really mean. That said, given complete freedom to develop, I would try and develop an array of functions other than just the basic arithmetic function, ex : prime factorisation, large prime generator etc. Another interesting possibility is to try and implement the divide and conquer strategy function using parallel computations, as most systems today are multicore, this would drastically reduce the time taken by the functions and hence make the library more feasible for large operations.
